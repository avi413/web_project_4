!function(){"use strict";class e{constructor(e,t,i,s,r){var n,o;o=()=>{const e=this._element.querySelector(".gallery__like-btn"),t=this._element.querySelector(".gllery__like-count");e.classList.contains("gallery__like-btn_active")?(this._deleteLike(this._element.id),t.textContent--):(this._addLike(this._element.id),t.textContent++),this._element.querySelector(".gallery__like-btn").classList.toggle("gallery__like-btn_active")},(n="_handleLikeBtn")in this?Object.defineProperty(this,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[n]=o,this._text=e.name,this._img=e.link,this._id=e._id,this._likes=e.likes,this._Cardowner=e.owner,this._cardSelector=t,this._handleCardClick=i,this._handleTrashClick=s,this._addLike=r.addLike,this._deleteLike=r.deleteLike,this._deleteCard=r.deleteCard}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__item").cloneNode(!0)}generateCard(){this._element=this._getTemplate();const e=this._element.querySelector(".gallery__item-img"),t=this._element.querySelector(".gallery__item-name"),i=document.querySelector(".profile__name").id;return e.src=this._img,e.alt=this._text,t.textContent=this._text,this._element.id=this._id,this._initLike(i),this._deleteIconVisibility(i),this._setEventListeners(),this._element}_deleteIconVisibility(e){e!=this._Cardowner._id&&(this._element.querySelector(".gallery__item-trash-btn").style.visibility="hidden")}_initLike(e){this._userExists(e)&&this._element.querySelector(".gallery__like-btn").classList.add("gallery__like-btn_active");const t=this._element.querySelector(".gllery__like-count");void 0!==this._likes?t.textContent=this._likes.length:t.textContent=0}_userExists(e){return void 0!==this._likes&&this._likes.some((function(t){return t._id===e}))}_setEventListeners(){this._element.querySelector(".gallery__like-btn").addEventListener("click",this._handleLikeBtn),this._element.querySelector(".gallery__item-trash-btn").addEventListener("click",this._handleTrashClick),this._element.querySelector(".gallery__item-img").addEventListener("click",this._handleCardClick)}}function t(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class i{constructor(e){t(this,"_handleEscClose",(e=>{"Escape"===e.key&&document.querySelector(".popup_opened")&&this.close()})),t(this,"_handleClickClosePopup",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()})),this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}setEventListeners(){document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClickClosePopup)}removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClickClosePopup)}}class s extends i{constructor(e,t){var i,s;super(e),s=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this.close()},(i="_handleSubmit")in this?Object.defineProperty(this,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[i]=s,this._handleFormSubmit=t,this._formElemet=this._popup.querySelector(".popup__form")}_getInputValues(){const e={};return this._formElemet.querySelectorAll(".popup__input").forEach((t=>{e[t.name]=[t.value]})),e}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleSubmit)}removeEventListeners(){this._formElemet.removeEventListener("submit",this._handleSubmit)}close(){super.close(),this._formElemet.reset(),this.removeEventListeners()}}class r extends i{constructor(e,t){let{src:i,title:s}=e;super(t),this._src=i,this._title=s}open(){super.open(),this._popupImg=this._popup.querySelector(".popup__img"),this._popupTitle=this._popup.querySelector(".popup__img-title"),this._popupImg.src=this._src,this._popupImg.alt=this._title,this._popupTitle.textContent="Photo of ".concat(this._title)}}class n extends i{constructor(e,t){var i,s;super(e),s=e=>{e.preventDefault(),this._handleConfirm(this._popup.id),this.close()},(i="_handleSubmit")in this?Object.defineProperty(this,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[i]=s,this._handleConfirm=t,this._formElemet=this._popup.querySelector(".popup__form")}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleSubmit)}removeEventListeners(){this._formElemet.removeEventListener("submit",this._handleSubmit)}open(e){super.open(),this._popup.id=e}close(){super.close(),this._formElemet.reset(),this.removeEventListeners()}}class o{constructor(e,t){this._formSelector=e.formSelector,this._formInputsFieldSet=e.formInputsFieldSet,this._inputSelector=e.inputSelector,this._submitBtnSelector=e.submitBtnSelector,this._inactiveBtnClass=e.inactiveBtnClass,this._inputErrClass=e.inputErrClass,this._inputErrActiveClass=e.inputErrActiveClass,this._formEl=document.querySelector(t)}_showInputErr(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrActiveClass)}_hideInputError(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrClass),t.classList.remove(this._inputErrActiveClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputErr(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}toggleButtonState(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this._hasInvalidInput(e)?(t.classList.add(this._inactiveBtnClass),t.disabled=!0):(t.classList.remove(this._inactiveBtnClass),t.disabled=!1)}_setEventListeners(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this.toggleButtonState(e,t),e.forEach((i=>{i.addEventListener("input",(()=>{this._checkInputValidity(i),this.toggleButtonState(e,t)}))}))}enableValidation(){this._setEventListeners(),this._formEl.addEventListener("submit",(e=>e.preventDefault()))}}const l={formSelector:".popup__form",formInputsFieldSet:".popup__form-set",inputSelector:".popup__input",submitBtnSelector:".popup__submit-btn",inactiveBtnClass:"button_inactive",inputErrClass:"popup__input-text_type_error",inputErrActiveClass:"popup__input-text-error_active"},a=document.forms.profileform,c=a.elements.profileName,_=a.elements.profileAboutMe,u=document.forms.placeform;function h(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}const p=document.querySelector("button.profile__edit-btn"),d=document.querySelector("button.profile__add-btn"),m=document.querySelector(".profile__name"),f=(document.querySelector(".profile__about-me"),document.querySelector(".profile__avatar"),document.querySelector(".gallery"),new Array),v=new class{constructor(e){h(this,"getInitialCards",(()=>this._call("/cards","GET"))),h(this,"getUserData",(()=>this._call("/users/me","GET"))),h(this,"addLike",(e=>this._call("/cards/likes/".concat(e),"PUT"))),h(this,"deleteLike",(e=>this._call("/cards/likes/".concat(e),"DELETE"))),h(this,"deleteCard",(e=>this._call("/cards/".concat(e),"DELETE"))),this._options=e}_call(e,t,i){return fetch(this._options.baseUrl+e,{method:t,headers:this._options.headers,body:JSON.stringify(i)}).then((e=>e.ok?e.json():Promise.reject(e.status)))}editProfile(e){let{name:t,about:i}=e;return this._call("/users/me","PATCH",{name:t[0],about:i[0]})}createNewCard(e,t){return this._call("/cards","POST",{name:t[0],link:e[0]})}init(){return Promise.all([this.getUserData(),this.getInitialCards()])}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"9b621f0f-5dfe-43f1-95fd-e9cc188bcc35","Content-Type":"application/json"}});function y(e){const t=document.querySelector(".profile__error");t.textContent=e,t.style.display="block"}v.init().then((e=>{let[t,i]=e;b.setUserInfo(t),b.setUserAvatar({avatar:t.avatar,name:t.name}),i.forEach((e=>{f.push(e)})),E.renderer()})).catch((e=>{y(e)}));const E=new class{constructor(e,t){let{data:i,renderer:s}=e;this._items=i,this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.append(e)}renderer(){this._items.forEach((e=>{this._renderer(e)}))}}({data:f,renderer:S},".gallery__list"),b=new class{constructor(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._nameElement.id=e._id,this._jobElement.textContent=e.about}setUserAvatar(e){let{avatar:t,name:i}=e;this._avatar.src=t,this._avatar.alt=i}}(".profile__name",".profile__about-me",".profile__avatar");function S(t){const i=new e(t,"#gallery-item-template",(()=>{new r({src:t.link,title:t.name},".popup_type_img").open()}),(()=>{new n(".popup_type_delete",L).open(t._id)}),v).generateCard();E.addItem(i)}const g=new s(".popup_type_new-card",(function(e){S({link:e.placeImageLink,name:e.placeName,owner:{_id:m.id}}),v.createNewCard(e.placeImageLink,e.placeName).then((e=>{console.log(e)})).catch((e=>{y(e)})),u.reset(),g.close(),k.toggleButtonState()}));function L(e){v.deleteCard(e).then((()=>{let e=document.querySelector(".gallery__item");e.remove(),e=null})).catch((e=>{alert(e)}))}d.addEventListener("click",(()=>g.open()));const C=new s(".popup_type_profile",(function(e){b.setUserInfo({name:e.profileName,about:e.profileAboutMe}),v.editProfile({name:e.profileName,about:e.profileAboutMe}).catch((e=>{console.log(e)})),q.toggleButtonState()}));p.addEventListener("click",(()=>{const{name:e,about:t}=b.getUserInfo();c.value=e,_.value=t,C.open()}));const k=new o(l,".popup__form_type_new-card");k.enableValidation();const q=new o(l,".popup__form_type_profile");q.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,