!function(){"use strict";class e{constructor(e,t,i,s,n,r){this._text=e.name,this._img=e.link,this._id=e._id,this._likes=e.likes,this._Cardowner=e.owner,this._cardSelector=t,this._handleCardClick=i,this._handleTrashClick=s,this._addLike=r.addLike,this._deleteLike=r.deleteLike,this._deleteCard=r.deleteCard,this._handleLike=n,this._element=document.querySelector(this._cardSelector).content.querySelector(".gallery__item").cloneNode(!0),this._itemImgEl=this._element.querySelector(".gallery__item-img"),this._itemNameEl=this._element.querySelector(".gallery__item-name"),this.profileEl=document.querySelector(".profile__name"),this._itemTrashBtn=this._element.querySelector(".gallery__item-trash-btn"),this._itemLikeBtn=this._element.querySelector(".gallery__like-btn"),this._gallerylikeCount=this._element.querySelector(".gllery__like-count")}getId(){return this._id}deleteCard(){this._element.remove(),this._element=null}generateCard(){return this._itemImgEl.src=this._img,this._itemNameEl.alt=this._text,this._itemNameEl.textContent=this._text,this._element.id=this._id,this._initLike(this.profileEl.id),this._deleteIconVisibility(this.profileEl.id),this._setEventListeners(),this._element}_deleteIconVisibility(e){e!=this._Cardowner._id&&(this._itemTrashBtn.style.visibility="hidden")}_initLike(e){this._userExists(e)&&this._itemLikeBtn.classList.add("gallery__like-btn_active"),void 0!==this._likes?this._gallerylikeCount.textContent=this._likes.length:this._gallerylikeCount.textContent=0}_userExists(e){return void 0!==this._likes&&this._likes.some((function(t){return t._id===e}))}_setEventListeners(){this._itemLikeBtn.addEventListener("click",(()=>{this._handleLike(this)})),this._itemTrashBtn.addEventListener("click",(()=>{this._handleTrashClick(this)})),this._itemImgEl.addEventListener("click",this._handleCardClick)}updateLikes(){return this._itemLikeBtn.classList.contains("gallery__like-btn_active")?this._deleteLike(this._element.id):this._addLike(this._element.id)}setLikes(e){this._gallerylikeCount.textContent=e.likes.length,this._itemLikeBtn.classList.toggle("gallery__like-btn_active")}}function t(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class i{constructor(e){t(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),t(this,"_handleClickClosePopup",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()})),this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}setEventListeners(){document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClickClosePopup)}removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClickClosePopup)}}class s extends i{constructor(e,t){var i,s;super(e),s=e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())},(i="_handleSubmit")in this?Object.defineProperty(this,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[i]=s,this._handleFormSubmit=t,this._formElemet=this._popup.querySelector(".popup__form"),this._inputsArr=this._formElemet.querySelectorAll(".popup__input"),this._btnEl=this._formElemet.querySelector(".popup__submit-btn"),this._inputValues={}}_getInputValues(){return this._inputsArr.forEach((e=>{e.value,this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._formElemet.removeEventListener("submit",this._handleSubmit)}renderLoading(e){this._btnEl.textContent=e?"Saving...":"Save"}close(){super.close(),this._formElemet.reset()}}class n{constructor(e,t){this._formSelector=e.formSelector,this._formInputsFieldSet=e.formInputsFieldSet,this._inputSelector=e.inputSelector,this._submitBtnSelector=e.submitBtnSelector,this._inactiveBtnClass=e.inactiveBtnClass,this._inputErrClass=e.inputErrClass,this._inputErrActiveClass=e.inputErrActiveClass,this._formEl=t,this._inputLst=Array.from(this._formEl.querySelectorAll(this._inputSelector)),this._btnEl=this._formEl.querySelector(this._submitBtnSelector)}_showInputErr(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrActiveClass)}_hideInputError(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrClass),t.classList.remove(this._inputErrActiveClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputErr(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputLst)?(this._btnEl.classList.add(this._inactiveBtnClass),this._btnEl.disabled=!0):(this._btnEl.classList.remove(this._inactiveBtnClass),this._btnEl.disabled=!1)}resetValidation(){this._toggleButtonState(),this._inputLst.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._toggleButtonState(),this._inputLst.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners(),this._formEl.addEventListener("submit",(e=>e.preventDefault()))}}const r=document.forms.profileform,l=r.elements.profileName,o=r.elements.profileAboutMe;function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}document.forms.placeform;const _=document.querySelector("button.profile__edit-btn"),h=document.querySelector("button.profile__add-btn"),c=document.querySelector(".profile__edit-avatar"),u=document.querySelector(".profile__error"),d=new class extends i{constructor(e,t,i){super(i),this._popupImg=this._popup.querySelector(e),this._popupTitle=this._popup.querySelector(t)}open(e,t){this._src=e,this._title=t,this._popupImg.src=this._src,this._popupImg.alt=this._title,this._popupTitle.textContent="Photo of ".concat(this._title),super.open()}}(".popup__img",".popup__img-title",".popup_type_img"),p=new class extends i{constructor(e,t){var i,s;super(e),s=e=>{e.preventDefault(),this._handleConfirm(this._cardEl)},(i="_handleSubmit")in this?Object.defineProperty(this,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[i]=s,this._handleConfirm=t,this._formElemet=this._popup.querySelector(".popup__form")}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleSubmit)}removeEventListeners(){super.removeEventListeners(),this._formElemet.removeEventListener("submit",this._handleSubmit)}open(e){super.open(),this._cardEl=e}}(".popup_type_delete",(function(e){g.deleteCard(e.getId()).then((()=>{e.deleteCard(),p.close()})).catch((e=>{console.log(e)}))})),m=new s(".popup_type_avatar",(function(e){m.renderLoading(!0),g.editProfileAvatar(e.avatarImageLink).then((e=>{L.setUserAvatar(e),m.close()})).catch((e=>{k(e)})).finally((()=>{m.renderLoading(!1)}))})),v=new s(".popup_type_new-card",(function(e){v.renderLoading(!0),g.createNewCard(e.placeImageLink,e.placeName).then((e=>{y(e),v.close()})).catch((e=>{k(e)})).finally((()=>{v.renderLoading(!1)}))})),E=new s(".popup_type_profile",(function(e){E.renderLoading(!0),g.editProfile({name:e.profileName,about:e.profileAboutMe}).then((e=>{L.setUserInfo(e),E.close()})).catch((e=>{console.log(e)})).finally((()=>{E.renderLoading(!1)}))})),f=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}rendererItems(e){e.forEach((e=>{this._renderer(e)}))}}(y,".gallery__list"),L=new class{constructor(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:i,_id:s}=e;this._nameElement.textContent=t,this._nameElement.id=s,this._jobElement.textContent=i}setUserAvatar(e){let{avatar:t,name:i=null}=e;this._avatar.src=t,i&&(this._avatar.alt=i)}}(".profile__name",".profile__about-me",".profile__avatar"),b={};c.addEventListener("click",(()=>{b.avatarform.resetValidation(),m.open()}));const g=new class{constructor(e){a(this,"getInitialCards",(()=>this._call("/cards","GET"))),a(this,"getUserData",(()=>this._call("/users/me","GET"))),a(this,"addLike",(e=>this._call("/cards/likes/".concat(e),"PUT"))),a(this,"deleteLike",(e=>this._call("/cards/likes/".concat(e),"DELETE"))),a(this,"deleteCard",(e=>this._call("/cards/".concat(e),"DELETE"))),this._options=e}_call(e,t,i){return fetch(this._options.baseUrl+e,{method:t,headers:this._options.headers,body:JSON.stringify(i)}).then((e=>e.ok?e.json():Promise.reject(e.status)))}editProfile(e){let{name:t,about:i}=e;return this._call("/users/me","PATCH",{name:t,about:i})}createNewCard(e,t){return this._call("/cards","POST",{name:t,link:e})}editProfileAvatar(e){return this._call("/users/me/avatar ","PATCH",{avatar:e})}init(){return Promise.all([this.getUserData(),this.getInitialCards()])}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"9b621f0f-5dfe-43f1-95fd-e9cc188bcc35","Content-Type":"application/json"}});function y(t){f.addItem(function(t){const i=new e(t,"#gallery-item-template",(()=>{d.open(t.link,t.name)}),(()=>{p.open(i)}),C,g);return i.generateCard()}(t))}function C(e){e.updateLikes().then((t=>{e.setLikes(t)})).catch((e=>{console.log(e)}))}function k(e){u.textContent=e,u.style.display="block"}var S;g.init().then((e=>{let[t,i]=e;L.setUserInfo(t),L.setUserAvatar({avatar:t.avatar,name:t.name}),f.rendererItems(i)})).catch((e=>{k(e)})),h.addEventListener("click",(()=>{b.placeform.resetValidation(),v.open()})),_.addEventListener("click",(()=>{const{name:e,about:t}=L.getUserInfo();l.value=e,o.value=t,b.profileform.resetValidation(),E.open()})),S={formSelector:".popup__form",formInputsFieldSet:".popup__form-set",inputSelector:".popup__input",submitBtnSelector:".popup__submit-btn",inactiveBtnClass:"button_inactive",inputErrClass:"popup__input-text_type_error",inputErrActiveClass:"popup__input-text-error_active"},Array.from(document.querySelectorAll(S.formSelector)).forEach((e=>{const t=new n(S,e),i=e.getAttribute("name");b[i]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,