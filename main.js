!function(){"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class t{constructor(t,n,s){e(this,"_handleLikeBtn",(()=>{this._element.querySelector(".gallery__item-like-btn").classList.toggle("gallery__item-like-btn_active")})),e(this,"_handleDeleteGalleryCardItem",(()=>{this._element.remove(),this._element=null})),this._text=t.name,this._img=t.link,this._cardSelector=n,this._handleCardClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__item").cloneNode(!0)}generateCard(){return this._element=this._getTemplate(),this._element.querySelector(".gallery__item-img").src=this._img,this._element.querySelector(".gallery__item-name").textContent=this._text,this._setEventListeners(),this._element}_setEventListeners(){this._element.querySelector(".gallery__item-like-btn").addEventListener("click",this._handleLikeBtn),this._element.querySelector(".gallery__item-trash-btn").addEventListener("click",this._handleDeleteGalleryCardItem),this._element.querySelector(".gallery__item-img").addEventListener("click",this._handleCardClick)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class s{constructor(e){n(this,"_handleEscClose",(e=>{"Escape"===e.key&&document.querySelector(".popup_opened")&&this.close()})),n(this,"_handleClickClosePopup",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()})),this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}setEventListeners(){document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClickClosePopup)}removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClickClosePopup)}}class r extends s{constructor(e,t){var n,s;super(e),s=e=>{e.preventDefault();const t=this._getInputValues();this._formSubmit(t),this.close()},(n="_handleProfileFormSubmit")in this?Object.defineProperty(this,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[n]=s,this._formSubmit=t,this._formElemet=this._popup.querySelector(".popup__form")}_getInputValues(){const e={};return this._formElemet.querySelectorAll(".popup__input").forEach((t=>{e[t.name]=[t.value]})),e}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleProfileFormSubmit)}close(){super.close(),this._formElemet.reset()}}class i extends s{constructor(e,t){let{src:n,title:s}=e;super(t),this._src=n,this._title=s}open(){super.open(),this._popup.querySelector(".popup__img").src=this._src,this._popup.querySelector(".popup__img").alt=this._title,this._popup.querySelector(".popup__img-title").textContent="Photo of ".concat(this._title)}}class o{constructor(e,t){this._formSelector=e.formSelector,this._formInputsFieldSet=e.formInputsFieldSet,this._inputSelector=e.inputSelector,this._submitBtnSelector=e.submitBtnSelector,this._inactiveBtnClass=e.inactiveBtnClass,this._inputErrClass=e.inputErrClass,this._inputErrActiveClass=e.inputErrActiveClass,this._formEl=document.querySelector(t)}_showInputErr(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrActiveClass)}_hideInputError(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrClass),t.classList.remove(this._inputErrActiveClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputErr(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}toggleButtonState(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this._hasInvalidInput(e)?(t.classList.add(this._inactiveBtnClass),t.disabled=!0):(t.classList.remove(this._inactiveBtnClass),t.disabled=!1)}_setEventListeners(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this.toggleButtonState(e,t),e.forEach((n=>{n.addEventListener("input",(()=>{this._checkInputValidity(n),this.toggleButtonState(e,t)}))}))}enableValidation(){this._setEventListeners(),this._formEl.addEventListener("submit",(e=>e.preventDefault()))}}const l={formSelector:".popup__form",formInputsFieldSet:".popup__form-set",inputSelector:".popup__input",submitBtnSelector:".popup__submit-btn",inactiveBtnClass:"button_inactive",inputErrClass:"popup__input-text_type_error",inputErrActiveClass:"popup__input-text-error_active"},a=document.querySelector("button.profile__edit-btn"),c=document.querySelector("button.profile__add-btn"),u=(document.querySelector(".profile__name"),document.querySelector(".profile__about-me"),document.querySelector(".gallery").querySelector(".gallery__list")),p=document.forms.profileform,_=p.elements.profileName,m=p.elements.profileAboutMe,d=document.forms.placeform,h=new class{constructor(e,t){let{data:n,renderer:s}=e;this._items=n,this._renderer=s,this._container=t}addItem(e){this._container.append(e)}renderer(){this._items.forEach((e=>{this._renderer(e)}))}}({data:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:y},u);function y(e){const n=new t(e,"#gallery-item-template",(()=>{new i({src:e.link,title:e.name},".popup_type_img").open()})).generateCard();h.addItem(n)}const f=new r(".popup_type_new-card",(function(e){y({link:e.placeImageLink,name:e.placeName}),d.reset(),f.close(),b.toggleButtonState()}));c.addEventListener("click",(()=>f.open()));const v=new class{constructor(e,t){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:n}=e;this._nameElement.textContent=t,this._jobElement.textContent=n}}(".profile__name",".profile__about-me"),E=new r(".popup_type_profile",(function(e){v.setUserInfo({name:e.profileName,job:e.profileAboutMe}),S.toggleButtonState()}));a.addEventListener("click",(()=>{const{name:e,job:t}=v.getUserInfo();_.value=e,m.value=t,E.open()}));const b=new o(l,".popup__form_type_new-card");b.enableValidation();const S=new o(l,".popup__form_type_profile");S.enableValidation(),h.renderer()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,