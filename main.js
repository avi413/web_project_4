!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s,i,r){e(this,"_handleLikeBtn",(()=>{const e=this._element.querySelector(".gallery__like-btn"),t=this._element.querySelector(".gllery__like-count");e.classList.contains("gallery__like-btn_active")?(this._deleteLike(this._element.id),t.textContent--):(this._addLike(this._element.id),t.textContent++),this._element.querySelector(".gallery__like-btn").classList.toggle("gallery__like-btn_active")})),e(this,"_handleDeleteGalleryCardItem",(()=>{this._element.remove(),this._element=null})),this._text=t.name,this._img=t.link,this._id=t._id,this._likes=t.likes,this._cardSelector=s,this._handleCardClick=i,this._addLike=r.addLike,this._deleteLike=r.deleteLike}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".gallery__item").cloneNode(!0)}generateCard(){this._element=this._getTemplate();const e=this._element.querySelector(".gallery__item-img"),t=this._element.querySelector(".gallery__item-name"),s=document.querySelector(".profile__name").id;return e.src=this._img,e.alt=this._text,t.textContent=this._text,this._element.id=this._id,this._initLike(s),this._setEventListeners(),this._element}_initLike(e){this._userExists(e)&&this._element.querySelector(".gallery__like-btn").classList.add("gallery__like-btn_active"),this._element.querySelector(".gllery__like-count").textContent=this._likes.length}_userExists(e){return this._likes.some((function(t){return t._id===e}))}_setEventListeners(){this._element.querySelector(".gallery__like-btn").addEventListener("click",this._handleLikeBtn),this._element.querySelector(".gallery__item-trash-btn").addEventListener("click",this._handleDeleteGalleryCardItem),this._element.querySelector(".gallery__item-img").addEventListener("click",this._handleCardClick)}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e){s(this,"_handleEscClose",(e=>{"Escape"===e.key&&document.querySelector(".popup_opened")&&this.close()})),s(this,"_handleClickClosePopup",(e=>{(e.target.classList.contains("popup_opened")||e.target.classList.contains("popup__close"))&&this.close()})),this._popup=document.querySelector(e)}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}setEventListeners(){document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleClickClosePopup)}removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleClickClosePopup)}}class r extends i{constructor(e,t){var s,i;super(e),i=e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this.close()},(s="_handleSubmit")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._handleFormSubmit=t,this._formElemet=this._popup.querySelector(".popup__form")}_getInputValues(){const e={};return this._formElemet.querySelectorAll(".popup__input").forEach((t=>{e[t.name]=[t.value]})),e}setEventListeners(){super.setEventListeners(),this._formElemet.addEventListener("submit",this._handleSubmit)}removeEventListeners(){this._formElemet.removeEventListener("submit",this._handleSubmit)}close(){super.close(),this._formElemet.reset(),this.removeEventListeners()}}class n extends i{constructor(e,t){let{src:s,title:i}=e;super(t),this._src=s,this._title=i}open(){super.open(),this._popupImg=this._popup.querySelector(".popup__img"),this._popupTitle=this._popup.querySelector(".popup__img-title"),this._popupImg.src=this._src,this._popupImg.alt=this._title,this._popupTitle.textContent="Photo of ".concat(this._title)}}class l{constructor(e,t){this._formSelector=e.formSelector,this._formInputsFieldSet=e.formInputsFieldSet,this._inputSelector=e.inputSelector,this._submitBtnSelector=e.submitBtnSelector,this._inactiveBtnClass=e.inactiveBtnClass,this._inputErrClass=e.inputErrClass,this._inputErrActiveClass=e.inputErrActiveClass,this._formEl=document.querySelector(t)}_showInputErr(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrClass),t.textContent=e.validationMessage,t.classList.add(this._inputErrActiveClass)}_hideInputError(e){const t=this._formEl.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrClass),t.classList.remove(this._inputErrActiveClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputErr(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}toggleButtonState(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this._hasInvalidInput(e)?(t.classList.add(this._inactiveBtnClass),t.disabled=!0):(t.classList.remove(this._inactiveBtnClass),t.disabled=!1)}_setEventListeners(){const e=Array.from(this._formEl.querySelectorAll(this._inputSelector)),t=this._formEl.querySelector(this._submitBtnSelector);this.toggleButtonState(e,t),e.forEach((s=>{s.addEventListener("input",(()=>{this._checkInputValidity(s),this.toggleButtonState(e,t)}))}))}enableValidation(){this._setEventListeners(),this._formEl.addEventListener("submit",(e=>e.preventDefault()))}}const o={formSelector:".popup__form",formInputsFieldSet:".popup__form-set",inputSelector:".popup__input",submitBtnSelector:".popup__submit-btn",inactiveBtnClass:"button_inactive",inputErrClass:"popup__input-text_type_error",inputErrActiveClass:"popup__input-text-error_active"},a=document.forms.profileform,c=a.elements.profileName,_=a.elements.profileAboutMe,u=document.forms.placeform;function p(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const h=document.querySelector("button.profile__edit-btn"),m=document.querySelector("button.profile__add-btn"),d=(document.querySelector(".profile__name"),document.querySelector(".profile__about-me"),document.querySelector(".profile__avatar"),document.querySelector(".gallery"),new Array),f=new class{constructor(e){p(this,"getInitialCards",(()=>this._call("/cards","GET"))),p(this,"getUserData",(()=>this._call("/users/me","GET"))),p(this,"addLike",(e=>this._call("/cards/likes/".concat(e),"PUT"))),p(this,"deleteLike",(e=>this._call("/cards/likes/".concat(e),"DELETE"))),this._options=e}_call(e,t,s){return fetch(this._options.baseUrl+e,{method:t,headers:this._options.headers,body:JSON.stringify(s)}).then((e=>e.ok?e.json():Promise.reject(e.status)))}editProfile(e){let{name:t,job:s}=e;return this._call("/users/me","PATCH",{name:t[0],about:s[0]})}createNewCard(e,t){return this._call("/cards","POST",{name:t[0],link:e[0]})}init(){return Promise.all([this.getUserData(),this.getInitialCards()])}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"9b621f0f-5dfe-43f1-95fd-e9cc188bcc35","Content-Type":"application/json"}});function v(e){const t=document.querySelector(".profile__error");t.textContent=e,t.style.display="block"}f.init().then((e=>{let[t,s]=e;E.setUserInfo(t),E.setUserAvatar({avatar:t.avatar,name:t.name}),s.forEach((e=>{d.push(e)})),y.renderer()})).catch((e=>{v(e)}));const y=new class{constructor(e,t){let{data:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){this._container.append(e)}renderer(){this._items.forEach((e=>{this._renderer(e)}))}}({data:d,renderer:b},".gallery__list"),E=new class{constructor(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._nameElement.id=e._id,this._jobElement.textContent=e.about}setUserAvatar(e){let{avatar:t,name:s}=e;this._avatar.src=t,this._avatar.alt=s}}(".profile__name",".profile__about-me",".profile__avatar");function b(e){const s=new t(e,"#gallery-item-template",(()=>{new n({src:e.link,title:e.name},".popup_type_img").open()}),f).generateCard();y.addItem(s)}const S=new r(".popup_type_new-card",(function(e){b({link:e.placeImageLink,name:e.placeName}),f.createNewCard(e.placeImageLink,e.placeName).then((e=>{console.log(e)})).catch((e=>{v(e)})),u.reset(),S.close(),L.toggleButtonState()}));m.addEventListener("click",(()=>S.open()));const g=new r(".popup_type_profile",(function(e){E.setUserInfo({name:e.profileName,job:e.profileAboutMe}),f.editProfile({name:e.profileName,job:e.profileAboutMe}).catch((e=>{console.log(e)})),k.toggleButtonState()}));h.addEventListener("click",(()=>{const{name:e,job:t}=E.getUserInfo();c.value=e,_.value=t,g.open()}));const L=new l(o,".popup__form_type_new-card");L.enableValidation();const k=new l(o,".popup__form_type_profile");k.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,